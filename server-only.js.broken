#!/usr/bin/env node

/**
 * Standalone Web Server for Screenshot Viewer
 */

const express = require('express');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const { getExternalIp } = require('./lib/getExternalIp');

const PORT = process.env.PORT || process.argv[2] || 3000;
const RESULTS_DIR = path.resolve(process.argv[3] || 'results');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
function generateGalleryHtml(siteName, timestamp, screenshots, viewUrl) {
  let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Screenshots - ${siteName}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .site-title { font-size: 24px; color: #333; margin-bottom: 10px; }
        .timestamp { color: #666; font-size: 14px; }
        .screenshots { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }
        .screenshot-item { background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); transition: transform 0.2s; }
        .screenshot-item:hover { transform: translateY(-2px); }
        .screenshot-image { width: 100%; height: 200px; object-fit: cover; cursor: pointer; }
        .screenshot-info { padding: 15px; }
        .screenshot-name { font-weight: bold; margin-bottom: 8px; }
        .download-btn { background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; text-decoration: none; display: inline-block; }
        .download-btn:hover { background: #0056b3; }
        .back-link { display: inline-block; margin-bottom: 20px; color: #007bff; text-decoration: none; }
        .back-link:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–∞–π—Ç–æ–≤</a>
        <div class="header">
            <div class="site-title">üåê ${siteName}</div>
            <div class="timestamp">üìÖ ${new Date(timestamp.replace(/_/g, ':').replace('T', ' ').replace('Z', '')).toLocaleString('ru-RU')}</div>
        </div>
        <div class="screenshots">`;

  screenshots.forEach(screenshot => {
    html += `
            <div class="screenshot-item">
                <img src="${screenshot.url}" alt="${screenshot.name}" class="screenshot-image" onclick="window.open('${screenshot.url}', '_blank')">
                <div class="screenshot-info">
                    <div class="screenshot-name">${screenshot.name}</div>
                    <a href="${screenshot.url}" download="${screenshot.name}" class="download-btn">üì• –°–∫–∞—á–∞—Ç—å</a>
                </div>
            </div>`;
  });

  html += `
        </div>
    </div>
</body>
</html>`;

  return html;
}

async function startServer() {
  const app = express();
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/', (req, res) => {
    if (!fs.existsSync(RESULTS_DIR)) {
      res.send('<h1>–ü–∞–ø–∫–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>');
      return;
    }

    const sites = fs.readdirSync(RESULTS_DIR).filter(item => {
      return fs.statSync(path.join(RESULTS_DIR, item)).isDirectory();
    });

    let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Playwright Screenshot Gallery</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .sites { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
        .site-item { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); transition: transform 0.2s; }
        .site-item:hover { transform: translateY(-2px); }
        .site-name { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #333; }
        .session-link { display: block; color: #007bff; text-decoration: none; padding: 5px 0; border-bottom: 1px solid #eee; }
        .session-link:last-child { border-bottom: none; }
        .session-link:hover { background: #f8f9fa; padding-left: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∏ Playwright Screenshot Gallery</h1>
            <p>–ì–∞–ª–µ—Ä–µ—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü</p>
        </div>
        <div class="sites">`;

    sites.forEach(site => {
      const sitePath = path.join(RESULTS_DIR, site);
      const sessions = fs.readdirSync(sitePath).filter(item => {
        return fs.statSync(path.join(sitePath, item)).isDirectory();
      }).sort().reverse(); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

      html += `
            <div class="site-item">
                <div class="site-name">üåê ${site}</div>`;

      sessions.forEach(session => {
        html += `<a href="/view/${site}/${session}" class="session-link">üìÖ ${session.replace(/_/g, ':').replace('T', ' ').replace('Z', '')}</a>`;
      });

      html += `
            </div>`;
    });

    html += `
        </div>
    </div>
</body>
</html>`;

    res.send(html);
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/view/:site/:session', (req, res) => {
    const { site, session } = req.params;
    const sessionPath = path.join(RESULTS_DIR, site, session);

    if (!fs.existsSync(sessionPath)) {
      res.status(404).send('<h1>–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>');
      return;
    }

    const files = fs.readdirSync(sessionPath).filter(file => file.endsWith('.png'));
    const screenshots = files.map(file => ({
      name: file,
      url: `/download/${site}/${session}/${file}`
    }));

    const html = generateGalleryHtml(site, session, screenshots, req.originalUrl);
    res.send(html);
  });

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  app.get('/download/:site/:session/:file', (req, res) => {
    const { site, session, file } = req.params;
    const filePath = path.join(RESULTS_DIR, site, session, file);

    if (fs.existsSync(filePath)) {
      res.download(filePath);
    } else {
      res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  // Health check
  app.get('/health', (req, res) => {
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      resultsDir: RESULTS_DIR
    });
  });

  try {
    const externalIp = await getExternalIp();
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(chalk.green('üéâ Screenshot Viewer Server –∑–∞–ø—É—â–µ–Ω!'));
      console.log(chalk.blue(`üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://${externalIp}:${PORT}`));
      console.log(chalk.blue(`üìÅ –ü–∞–ø–∫–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏: ${RESULTS_DIR}`));
      console.log(chalk.gray('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'));
    });
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:'), error.message);
    process.exit(1);
  }
}

startServer();
