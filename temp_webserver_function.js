// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è startWebServer —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ—Ä—Ç–º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function startWebServer(resultsDir, preferredPort = 3000) {
  const { PortManager } = require('./lib/portManager');
  const { FirewallManager } = require('./lib/firewallManager');
  
  try {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const portManager = new PortManager({ 
      preferredPort: preferredPort,
      portRange: { min: 9000, max: 9010 }
    });
    const firewallManager = new FirewallManager();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    const serverInfo = await portManager.getOrCreateServer();
    const actualPort = serverInfo.port;
    
    if (serverInfo.isNew) {
      console.log(`‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—Ç: ${actualPort}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
      await firewallManager.reportFirewallStatus(actualPort);
    } else {
      console.log(`üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${actualPort}`);
      return { port: actualPort, server: null }; // –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è CLI)
    const app = express();
    
    // CORS
    app.use((req, res, next) => {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
      next();
    });
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç –¥–ª—è CLI –≤–µ—Ä—Å–∏–∏
    app.get('/', (req, res) => {
      res.send(`
        <html>
          <body>
            <h1>Screenshot Server Active</h1>
            <p>Port: ${actualPort}</p>
            <p>Use server-only.js for full web interface</p>
          </body>
        </html>
      `);
    });

    const server = http.createServer(app);
    
    return new Promise((resolve, reject) => {
      server.listen(actualPort, '0.0.0.0', (err) => {
        if (err) {
          reject(err);
        } else {
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          const externalIp = '77.73.238.240'; // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º
          portManager.saveServerMeta(actualPort, process.pid, externalIp);
          
          resolve({ server, port: actualPort });
        }
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    throw error;
  }
}
