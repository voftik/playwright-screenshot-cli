#!/usr/bin/env node

/**
 * Playwright Screenshot CLI with Web Server
 * 
 * CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 * –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JSDoc, async/await –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */

const { chromium } = require('playwright');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');
const { program } = require('commander');
const chalk = require('chalk');
const express = require('express');
const http = require('http');
const { z } = require('zod');

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å zod
const urlSchema = z.string().url();
const screenshotOptionsSchema = z.object({
  width: z.number().min(100).max(5000).optional(),
  height: z.number().min(100).max(5000).optional(),
  timeout: z.number().min(1000).max(60000).optional(),
  fullPage: z.boolean().optional(),
  quality: z.number().min(1).max(100).optional()
});

/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —á–µ—Ä–µ–∑ JSDoc
 * @typedef {Object} ScreenshotOptions
 * @property {number} [width=1920] - –®–∏—Ä–∏–Ω–∞ viewport
 * @property {number} [height=1080] - –í—ã—Å–æ—Ç–∞ viewport  
 * @property {number} [timeout=30000] - –¢–∞–π–º–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @property {boolean} [fullPage=true] - –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @property {number} [quality=90] - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-100)
 */

/**
 * @typedef {Object} ScreenshotResult
 * @property {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @property {string} [path] - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @property {string} [error] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @property {number} fileSize - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @property {number} duration - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º zod
 * @param {string} url - URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function isValidUrl(url) {
  try {
    urlSchema.parse(url);
    return true;
  } catch {
    return false;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @param {ScreenshotOptions} options - –û–ø—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {ScreenshotOptions} –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @throws {Error} –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateScreenshotOptions(options) {
  try {
    return screenshotOptionsSchema.parse(options);
  } catch (error) {
    throw new Error(`Invalid screenshot options: ${error.message}`);
  }
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
 * @param {string} url - URL –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL
 */
function normalizeUrl(url) {
  if (!url.startsWith('http://') && !url.startsWith('https://')) {
    return 'https://' + url;
  }
  return url;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–∞–π—Ç–∞ –∏–∑ URL
 * @param {string} url - URL
 * @returns {string} –ò–º—è —Å–∞–π—Ç–∞
 */
function getSiteName(url) {
  try {
    const urlObj = new URL(url);
    return urlObj.hostname.replace(/^www\./, '');
  } catch (error) {
    return url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split('/')[0];
  }
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {ScreenshotOptions} options - –û–ø—Ü–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * @returns {Promise<ScreenshotResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 */
async function takeScreenshot(url, options = {}) {
  const startTime = Date.now();
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!isValidUrl(url)) {
      throw new Error('Invalid URL provided');
    }
    
    const validatedOptions = {
      width: 1920,
      height: 1080,
      timeout: 30000,
      fullPage: true,
      quality: 90,
      ...validateScreenshotOptions(options)
    };

    const normalizedUrl = normalizeUrl(url);
    const siteName = getSiteName(normalizedUrl);
    const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const resultsDir = path.join(__dirname, 'results', siteName, timestamp);
    await fs.mkdir(resultsDir, { recursive: true });
    
    const screenshotPath = path.join(resultsDir, 'screenshot.png');
    
    console.log(chalk.blue(`üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${normalizedUrl}`));
    console.log(chalk.gray(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: ${screenshotPath}`));
    
    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    const browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-dev-shm-usage']
    });
    
    try {
      const context = await browser.newContext({
        viewport: { 
          width: validatedOptions.width, 
          height: validatedOptions.height 
        },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
      });
      
      const page = await context.newPage();
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
      page.setDefaultTimeout(validatedOptions.timeout);
      
      await page.goto(normalizedUrl, { 
        waitUntil: 'networkidle',
        timeout: validatedOptions.timeout 
      });
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.waitForLoadState('domcontentloaded');
      await page.waitForTimeout(2000);
      
      await page.screenshot({
        path: screenshotPath,
        fullPage: validatedOptions.fullPage,
        quality: validatedOptions.quality,
        type: 'png'
      });
      
      await context.close();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      const stats = await fs.stat(screenshotPath);
      const duration = Date.now() - startTime;
      
      console.log(chalk.green(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`));
      console.log(chalk.gray(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(2)} KB`));
      console.log(chalk.gray(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`));
      
      return {
        success: true,
        path: screenshotPath,
        fileSize: stats.size,
        duration
      };
      
    } finally {
      await browser.close();
    }
    
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`));
    
    return {
      success: false,
      error: error.message,
      fileSize: 0,
      duration
    };
  }
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param {number} port - –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<http.Server>} HTTP —Å–µ—Ä–≤–µ—Ä
 */
async function createWebServer(port = 3000) {
  const app = express();
  const resultsDir = path.join(__dirname, 'results');
  
  // Middleware
  app.use(express.static(resultsDir));
  app.use(express.json());
  
  // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/api/screenshots', async (req, res) => {
    try {
      const sites = await fs.readdir(resultsDir);
      const screenshots = [];
      
      for (const site of sites) {
        const sitePath = path.join(resultsDir, site);
        const siteStats = await fs.stat(sitePath);
        
        if (siteStats.isDirectory()) {
          const timestamps = await fs.readdir(sitePath);
          
          for (const timestamp of timestamps) {
            const timestampPath = path.join(sitePath, timestamp);
            const timestampStats = await fs.stat(timestampPath);
            
            if (timestampStats.isDirectory()) {
              const screenshotPath = path.join(timestampPath, 'screenshot.png');
              
              if (fsSync.existsSync(screenshotPath)) {
                const stats = await fs.stat(screenshotPath);
                screenshots.push({
                  site,
                  timestamp,
                  size: stats.size,
                  created: stats.birthtime,
                  path: `/api/screenshot/${site}/${timestamp}`
                });
              }
            }
          }
        }
      }
      
      res.json(screenshots);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
  // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  app.get('/api/screenshot/:site/:timestamp', async (req, res) => {
    try {
      const { site, timestamp } = req.params;
      const screenshotPath = path.join(resultsDir, site, timestamp, 'screenshot.png');
      
      if (fsSync.existsSync(screenshotPath)) {
        res.sendFile(path.resolve(screenshotPath));
      } else {
        res.status(404).json({ error: 'Screenshot not found' });
      }
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  app.get('/', (req, res) => {
    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>Screenshot Viewer</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .screenshot { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
          .screenshot img { max-width: 100%; height: auto; }
          .meta { color: #666; font-size: 14px; margin-bottom: 10px; }
        </style>
      </head>
      <body>
        <h1>üì∏ Screenshot Viewer</h1>
        <div id="screenshots">Loading...</div>
        
        <script>
        async function loadScreenshots() {
          try {
            const response = await fetch('/api/screenshots');
            const screenshots = await response.json();
            
            const container = document.getElementById('screenshots');
            
            if (screenshots.length === 0) {
              container.innerHTML = '<p>No screenshots found.</p>';
              return;
            }
            
            container.innerHTML = screenshots
              .sort((a, b) => new Date(b.created) - new Date(a.created))
              .map(shot => \`
                <div class="screenshot">
                  <div class="meta">
                    <strong>\${shot.site}</strong> - 
                    \${new Date(shot.created).toLocaleString()} - 
                    \${(shot.size / 1024).toFixed(2)} KB
                  </div>
                  <img src="\${shot.path}" alt="\${shot.site} screenshot" />
                </div>
              \`).join('');
          } catch (error) {
            document.getElementById('screenshots').innerHTML = 
              \`<p>Error loading screenshots: \${error.message}</p>\`;
          }
        }
        
        loadScreenshots();
        </script>
      </body>
      </html>
    `);
  });
  
  return new Promise((resolve, reject) => {
    const server = app.listen(port, (error) => {
      if (error) {
        reject(error);
      } else {
        console.log(chalk.green(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`));
        resolve(server);
      }
    });
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CLI –∫–æ–º–∞–Ω–¥
program
  .name('screenshot')
  .description('CLI tool for taking webpage screenshots using Playwright')
  .version('1.0.0');

program
  .command('take')
  .description('Take a screenshot of a webpage')
  .argument('<url>', 'URL to screenshot')
  .option('-w, --width <number>', 'viewport width', '1920')
  .option('-h, --height <number>', 'viewport height', '1080')
  .option('-t, --timeout <number>', 'timeout in milliseconds', '30000')
  .option('--no-full-page', 'disable full page screenshot')
  .option('-q, --quality <number>', 'image quality (1-100)', '90')
  .action(async (url, options) => {
    const screenshotOptions = {
      width: parseInt(options.width),
      height: parseInt(options.height),
      timeout: parseInt(options.timeout),
      fullPage: options.fullPage,
      quality: parseInt(options.quality)
    };
    
    const result = await takeScreenshot(url, screenshotOptions);
    
    if (result.success) {
      console.log(chalk.green(`Screenshot saved to: ${result.path}`));
    } else {
      console.error(chalk.red(`Failed to take screenshot: ${result.error}`));
      process.exit(1);
    }
  });

program
  .command('serve')
  .description('Start web server to view screenshots')
  .option('-p, --port <number>', 'port number', '3000')
  .action(async (options) => {
    const port = parseInt(options.port);
    
    try {
      await createWebServer(port);
      console.log(chalk.blue('Press Ctrl+C to stop the server'));
      
      // Graceful shutdown
      process.on('SIGINT', () => {
        console.log(chalk.yellow('\nüëã Shutting down server...'));
        process.exit(0);
      });
      
    } catch (error) {
      console.error(chalk.red(`Failed to start server: ${error.message}`));
      process.exit(1);
    }
  });

// –ó–∞–ø—É—Å–∫ CLI
if (require.main === module) {
  program.parse();
}

module.exports = {
  takeScreenshot,
  createWebServer,
  isValidUrl,
  validateScreenshotOptions,
  normalizeUrl,
  getSiteName
};
