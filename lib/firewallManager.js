const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π—Ä–≤–æ–ª–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞
 */
class FirewallManager {
    constructor() {
        this.allowedPortRange = '9000:9010';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å ufw
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ ufw –∞–∫—Ç–∏–≤–µ–Ω
     */
    async isUfwActive() {
        try {
            const { stdout } = await execAsync('ufw status');
            return stdout.includes('Status: active');
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å ufw: ${error.message}`);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ
     * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
     */
    async isPortAllowed(port) {
        try {
            const { stdout } = await execAsync('ufw status numbered');
            const portRangeRegex = new RegExp(`${this.allowedPortRange}/tcp`);
            const specificPortRegex = new RegExp(`${port}/tcp`);
            
            return portRangeRegex.test(stdout) || specificPortRegex.test(stdout);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞: ${error.message}`);
            return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
     * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Promise<object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async checkFirewallForPort(port) {
        const isActive = await this.isUfwActive();
        
        if (!isActive) {
            return {
                status: 'disabled',
                message: 'üîì –§–∞–π—Ä–≤–æ–ª –æ—Ç–∫–ª—é—á–µ–Ω - –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω',
                needsAction: false
            };
        }

        const isAllowed = await this.isPortAllowed(port);
        
        if (isAllowed) {
            return {
                status: 'allowed',
                message: `‚úÖ –ü–æ—Ä—Ç ${port} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ`,
                needsAction: false
            };
        }

        return {
            status: 'blocked',
            message: `üö´ –ü–æ—Ä—Ç ${port} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ`,
            needsAction: true,
            suggestion: `–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo ufw allow ${port}/tcp`
        };
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞
     * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async reportFirewallStatus(port) {
        console.log(`üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ ${port}...`);
        
        const result = await this.checkFirewallForPort(port);
        console.log(result.message);
        
        if (result.needsAction) {
            console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${result.suggestion}`);
            console.log(`üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –î–∏–∞–ø–∞–∑–æ–Ω ${this.allowedPortRange} —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç`);
        }
        
        return result;
    }
}

module.exports = { FirewallManager };
