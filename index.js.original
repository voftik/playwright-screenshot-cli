#!/usr/bin/env node

/**
 * Playwright Screenshot CLI with Web Server
 * 
 * CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');
const { program } = require('commander');
const chalk = require('chalk');
const express = require('express');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
function isValidUrl(string) {
  try {
    const url = new URL(string);
    return url.protocol === 'http:' || url.protocol === 'https:';
  } catch (_) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL
function normalizeUrl(url) {
  if (!url.startsWith('http://') && !url.startsWith('https://')) {
    return 'https://' + url;
  }
  return url;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–∞–π—Ç–∞ –∏–∑ URL
function getSiteName(url) {
  try {
    const urlObj = new URL(url);
    return urlObj.hostname.replace(/^www\./, '');
  } catch (error) {
    return url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split('/')[0];
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
function generateViewerHTML(screenshotsDir, siteName, timestamp) {
  const resultsPath = path.join(screenshotsDir, siteName, timestamp);
  
  if (!fs.existsSync(resultsPath)) {
    return '<h1>–°–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h1>';
  }

  const files = fs.readdirSync(resultsPath).filter(file => file.endsWith('.png'));
  files.sort();

  const fullPageFile = files.find(f => f.includes('full_page'));
  const viewportFiles = files.filter(f => f.includes('viewport')).sort();

  let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∫—Ä–∏–Ω—à–æ—Ç—ã - ${siteName}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .section {
            margin-bottom: 40px;
        }
        
        .section h2 {
            color: #333;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        
        .screenshot-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .screenshot-item {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s;
        }
        
        .screenshot-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .screenshot-item img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            object-position: top;
        }
        
        .screenshot-info {
            padding: 15px;
            background: #f9f9f9;
        }
        
        .screenshot-info h3 {
            margin: 0 0 5px 0;
            color: #333;
        }
        
        .screenshot-info p {
            margin: 0;
            color: #666;
            font-size: 0.9em;
        }
        
        .download-btn {
            display: inline-block;
            margin-top: 10px;
            padding: 8px 16px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-size: 0.9em;
            transition: background 0.2s;
        }
        
        .download-btn:hover {
            background: #5a67d8;
        }
        
        .full-page-section img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        
        .stats {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã</h1>
            <p>–°–∞–π—Ç: <strong>${siteName}</strong> | –í—Ä–µ–º—è: ${timestamp.replace(/_/g, ':').replace('T', ' ')}</p>
        </div>
        
        <div class="content">
            <div class="stats">
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">${files.length}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${viewportFiles.length}</div>
                        <div class="stat-label">–ü–æ—ç–∫—Ä–∞–Ω–Ω—ã—Ö</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">1</div>
                        <div class="stat-label">–ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</div>
                    </div>
                </div>
            </div>`;

  if (fullPageFile) {
    const stats = fs.statSync(path.join(resultsPath, fullPageFile));
    html += `
            <div class="section">
                <h2>üñºÔ∏è –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h2>
                <div class="full-page-section">
                    <img src="/screenshot/${siteName}/${timestamp}/${fullPageFile}" alt="–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç">
                    <div style="margin-top: 15px;">
                        <strong>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</strong> ${(stats.size / 1024).toFixed(1)} KB |
                        <a href="/download/${siteName}/${timestamp}/${fullPageFile}" class="download-btn">üíæ –°–∫–∞—á–∞—Ç—å</a>
                    </div>
                </div>
            </div>`;
  }

  if (viewportFiles.length > 0) {
    html += `
            <div class="section">
                <h2>üì∫ –ü–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã</h2>
                <div class="screenshot-grid">`;
    
    viewportFiles.forEach(file => {
      const stats = fs.statSync(path.join(resultsPath, file));
      html += `
                    <div class="screenshot-item">
                        <img src="/screenshot/${siteName}/${timestamp}/${file}" alt="${file}">
                        <div class="screenshot-info">
                            <h3>${file}</h3>
                            <p>–†–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(1)} KB</p>
                            <a href="/download/${siteName}/${timestamp}/${file}" class="download-btn">üíæ –°–∫–∞—á–∞—Ç—å</a>
                        </div>
                    </div>`;
    });
    
    html += `
                </div>
            </div>`;
  }

  html += `
        </div>
    </div>
</body>
</html>`;

  return html;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
function startWebServer(resultsDir, port = 3000) {
  const app = express();
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/', (req, res) => {
    if (!fs.existsSync(resultsDir)) {
      res.send('<h1>–ü–∞–ø–∫–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>');
      return;
    }

    const sites = fs.readdirSync(resultsDir).filter(item => {
      return fs.statSync(path.join(resultsDir, item)).isDirectory();
    });

    let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Playwright Screenshot Gallery</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 40px; }
        .header h1 { color: #333; font-size: 3em; margin-bottom: 10px; }
        .site-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
        .site-card { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .site-card h2 { color: #667eea; margin-top: 0; }
        .timestamp-list { list-style: none; padding: 0; }
        .timestamp-list li { margin: 10px 0; }
        .timestamp-list a { color: #333; text-decoration: none; padding: 8px 12px; background: #f8f9fa; border-radius: 4px; display: block; }
        .timestamp-list a:hover { background: #e9ecef; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∏ Screenshot Gallery</h1>
            <p>–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã</p>
        </div>
        <div class="site-grid">`;

    sites.forEach(site => {
      const sitePath = path.join(resultsDir, site);
      const timestamps = fs.readdirSync(sitePath).filter(item => {
        return fs.statSync(path.join(sitePath, item)).isDirectory();
      }).sort().reverse();

      html += `
            <div class="site-card">
                <h2>üåê ${site}</h2>
                <ul class="timestamp-list">`;
      
      timestamps.forEach(timestamp => {
        const displayTime = timestamp.replace(/_/g, ':').replace('T', ' ');
        html += `<li><a href="/view/${site}/${timestamp}">üìÖ ${displayTime}</a></li>`;
      });
      
      html += `
                </ul>
            </div>`;
    });

    html += `
        </div>
    </div>
</body>
</html>`;

    res.send(html);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/view/:site/:timestamp', (req, res) => {
    const { site, timestamp } = req.params;
    const html = generateViewerHTML(resultsDir, site, timestamp);
    res.send(html);
  });

  // –û—Ç–¥–∞—á–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/screenshot/:site/:timestamp/:filename', (req, res) => {
    const { site, timestamp, filename } = req.params;
    const filePath = path.join(resultsDir, site, timestamp, filename);
    
    if (fs.existsSync(filePath)) {
      res.sendFile(path.resolve(filePath));
    } else {
      res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  app.get('/download/:site/:timestamp/:filename', (req, res) => {
    const { site, timestamp, filename } = req.params;
    const filePath = path.join(resultsDir, site, timestamp, filename);
    
    if (fs.existsSync(filePath)) {
      res.download(filePath);
    } else {
      res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  const server = http.createServer(app);
  
  return new Promise((resolve, reject) => {
    server.listen(port, (err) => {
      if (err) {
        reject(err);
      } else {
        resolve({ server, port });
      }
    });
  });
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CLI –∫–æ–º–∞–Ω–¥
program
  .name('screenshot')
  .description('CLI tool for taking webpage screenshots using Playwright with web viewer')
  .version('1.1.0')
  .argument('<url>', 'URL –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
  .option('-d, --dir <directory>', '–ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'results')
  .option('-t, --timeout <ms>', '–¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö', '30000')
  .option('-w, --wait <ms>', '–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö', '500')
  .option('-s, --server', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤', false)
  .option('-p, --port <number>', '–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞', '3000')
  .action((url, options) => {
    captureScreenshots(url, options);
  });

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
async function captureScreenshots(url, options) {
  const startTime = Date.now();
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
    const normalizedUrl = normalizeUrl(url);
    if (!isValidUrl(normalizedUrl)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π URL: ${url}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://example.com`);
    }

    console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ Playwright Screenshot CLI'));
    console.log(chalk.blue(`üåê URL: ${normalizedUrl}`));
    console.log(chalk.gray(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${options.dir}`));
    console.log(chalk.gray(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${options.timeout}ms`));

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const timestamp = new Date().toISOString().replace(/[-:.]/g, "_").slice(0, -5) + "Z";
    const siteName = getSiteName(normalizedUrl);
    const savePath = path.join(options.dir, siteName, timestamp);
    
    console.log(chalk.yellow('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...'));
    try {
      fs.mkdirSync(savePath, { recursive: true });
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${savePath}: ${error.message}`);
    }

    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log(chalk.yellow('‚è≥ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...'));
    const browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    page.setDefaultTimeout(parseInt(options.timeout));
    page.setDefaultNavigationTimeout(parseInt(options.timeout));
    
    try {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log(chalk.yellow('‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...'));
      await page.goto(normalizedUrl, { 
        waitUntil: 'networkidle',
        timeout: parseInt(options.timeout)
      });

      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      console.log(chalk.yellow('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...'));
      await page.waitForTimeout(2000);

      // –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
      console.log(chalk.yellow('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...'));
      const fullPagePath = path.join(savePath, 'full_page.png');
      await page.screenshot({ 
        path: fullPagePath, 
        fullPage: true,
        type: 'png'
      });
      
      const fullPageStats = fs.statSync(fullPagePath);
      console.log(chalk.green(`‚úÖ –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: ${fullPagePath} (${(fullPageStats.size / 1024).toFixed(1)} KB)`));
      
      // –ü–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
      console.log(chalk.yellow('üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—ç–∫—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...'));
      const viewportSize = page.viewportSize();
      const viewportHeight = viewportSize.height;
      let scrollY = 0;
      let index = 0;
      let documentHeight = await page.evaluate(() => Math.max(
        document.body.scrollHeight,
        document.body.offsetHeight,
        document.documentElement.clientHeight,
        document.documentElement.scrollHeight,
        document.documentElement.offsetHeight
      ));

      // –°–±—Ä–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–æ
      await page.evaluate(() => window.scrollTo(0, 0));
      await page.waitForTimeout(parseInt(options.wait));

      while (scrollY < documentHeight) {
        const viewportPath = path.join(savePath, `viewport_${index.toString().padStart(2, '0')}.png`);
        await page.screenshot({ 
          path: viewportPath,
          type: 'png'
        });
        
        const viewportStats = fs.statSync(viewportPath);
        console.log(chalk.gray(`  üì± viewport_${index.toString().padStart(2, '0')}.png (${(viewportStats.size / 1024).toFixed(1)} KB)`));
        
        index++;
        scrollY += viewportHeight;
        
        if (scrollY < documentHeight) {
          await page.evaluate(_scrollY => window.scrollTo(0, _scrollY), scrollY);
          await page.waitForTimeout(parseInt(options.wait));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
          documentHeight = await page.evaluate(() => Math.max(
            document.body.scrollHeight,
            document.body.offsetHeight,
            document.documentElement.clientHeight,
            document.documentElement.scrollHeight,
            document.documentElement.offsetHeight
          ));
        }
      }

      await browser.close();
      
      const endTime = Date.now();
      const duration = ((endTime - startTime) / 1000).toFixed(1);
      
      console.log(chalk.green('‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!'));
      console.log(chalk.blue(`üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${savePath}`));
      console.log(chalk.blue(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`));
      console.log(chalk.blue(`üìä –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${index + 1} (1 –ø–æ–ª–Ω—ã–π + ${index} –ø–æ—ç–∫—Ä–∞–Ω–Ω—ã—Ö)`));
      
      // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü–∏—è
      if (options.server) {
        console.log(chalk.yellow('üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...'));
        try {
          const { port } = await startWebServer(options.dir, parseInt(options.port));
          console.log(chalk.green(`üéâ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!`));
          console.log(chalk.blue(`üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${port}`));
          console.log(chalk.blue(`üìã –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã: http://localhost:${port}/view/${siteName}/${timestamp}`));
          console.log(chalk.gray('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'));
        } catch (error) {
          console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞:'), error.message);
        }
      } else {
        console.log(chalk.gray('üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é --server'));
      }
      
    } catch (pageError) {
      await browser.close();
      throw pageError;
    }
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    if (error.message.includes('net::ERR_NAME_NOT_RESOLVED')) {
      console.log(chalk.yellow('üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'));
    } else if (error.message.includes('Timeout')) {
      console.log(chalk.yellow('üí° –°–æ–≤–µ—Ç: –£–≤–µ–ª–∏—á—å—Ç–µ —Ç–∞–π–º–∞—É—Ç —Å –ø–æ–º–æ—â—å—é –æ–ø—Ü–∏–∏ --timeout'));
    } else if (error.message.includes('EACCES') || error.message.includes('EPERM')) {
      console.log(chalk.yellow('üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'));
    }
    
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error(chalk.red('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:'), reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error);
  process.exit(1);
});

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
program.parse(process.argv);
